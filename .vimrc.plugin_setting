" 括弧の色付け表示
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" EasyMotion
" ホームポジションに近いキーを使う
let g:EasyMotion_keys='hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'
" 「'」 + 何かにマッピング
let g:EasyMotion_leader_key="'"
" 1 ストローク選択を優先する
let g:EasyMotion_grouping=1
" カラー設定変更
hi EasyMotionTarget ctermbg=none ctermfg=red
hi EasyMotionShade  ctermbg=none ctermfg=blue

" vim-indent-guides
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 1
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1

" indent guides
augroup indentguides
  autocmd!
  " 奇数インデントのカラー
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#262626 ctermbg=gray
  " 偶数インデントのカラー
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#3c3c3c ctermbg=darkgray
  " ハイライト色の変化の幅
  let g:indent_guides_color_change_percent = 30
augroup END

" vim-ref
let g:ref_source_webdict_sites = {
      \   'weblio': {
      \     'url': 'http://ejje.weblio.jp/content/%s',
      \     'keyword_encoding': 'utf-8',
      \     'cache': 1,
      \   },
      \   'wiki': {
      \     'url': 'http://ja.wikipedia.org/wiki/%s',
      \   },
      \ }
let g:ref_source_webdict_sites.default = 'weblio'
function! g:ref_source_webdict_sites.weblio.filter(output)
  return join(split(a:output, "\n")[53 :], "\n")
endfunction
function! g:ref_source_webdict_sites.wiki.filter(output)
  return join(split(a:output, "\n")[17 :], "\n")
endfunction)

" QuickRun
let g:quickrun_config = {}
let g:quickrun_config['markdown'] = {
      \ 'outputter': 'browser'
      \ }

" vim-powerline
" 日本語化
let g:Powerline_mode_i = '挿入'
let g:Powerline_mode_R = '置換'
let g:Powerline_mode_n = '通常'
let g:Powerline_mode_v = 'ビジュアル'
let g:Powerline_mode_V = '行ビジュアル'
let g:Powerline_mode_cv = '矩形ビジュアル'
let g:Powerline_mode_s = '選択'
let g:Powerline_mode_S = '行選択'
let g:Powerline_mode_cs = '矩形選択'

" gundo.vim
nmap U :<C-u>GundoToggle<CR>

" snippet
let g:neosnippet#snippets_directory='~/.vim/bundle/snipmate-snippets/snippets'

" tagbar
nmap <F8> :TagbarToggle<CR>

" GNU GLOBAL (gtags.vim)
map <C-g> :Gtags 
map <C-h> :Gtags -f %<CR>
map <C-j> :GtagsCursor<CR>
map <C-n> :cn<CR>
map <C-p> :cp<CR>

" HybridText
autocmd BufEnter * if &filetype == "" | setlocal ft=hybrid | endif

" gist.vim
let g:gist_show_privates = 1
let g:gist_post_private = 1

" gitv

function! s:gitv_get_current_hash()
  return matchstr(getline('.'), '\[\zs.\{7\}\ze\]$')
endfunction

autocmd FileType git setlocal nofoldenable foldlevel=0
function! s:toggle_git_folding()
  if &filetype ==# 'git'
    setlocal foldenable!
  endif
endfunction

autocmd FileType gitv call s:my_gitv_settings()
function! s:my_gitv_settings()
  " 現在のカーソル位置にあるブランチ名を取得してログ上でブランチにcheckoutする
  setlocal iskeyword+=/,-,.
  nnoremap <silent><buffer> C :<C-u>Git checkout <C-r><C-w><CR>

  " 現在のカーソル行の SHA1 ハッシュを取得してログ上であらゆることを実行する
  nnoremap <buffer> <Space>rb :<C-u>Git rebase <C-r>=GitvGetCurrentHash()<CR><Space>
  nnoremap <buffer> <Space>R :<C-u>Git revert <C-r>=GitvGetCurrentHash()<CR><CR>
  nnoremap <buffer> <Space>h :<C-u>Git cherry-pick <C-r>=GitvGetCurrentHash()<CR><CR>
  nnoremap <buffer> <Space>rh :<C-u>Git reset --hard <C-r>=GitvGetCurrentHash()<CR>

  " ファイルの diff じゃなくて変更されたファイルの一覧が見たい
  nnoremap <silent><buffer> t :<C-u>windo call <SID>toggle_git_folding()<CR>1<C-w>w
endfunction

